@using Data.Tracking
@using System.Text.Json
@using System.Net.Http
@using System.Net.Http.Json


@inject HttpClient Http
@inject NavigationManager Url;
@inject ITrackedPrintService print;
@typeparam TItem
@implements ITrackedUpdateItem

@code {
    [CascadingParameter]
    public TrackedUpdate UpdateContainer { get; set; }

    private string errorMessage { get; set; }

    private string selectedPrintProfile { get; set; }

    [Parameter]
    public IEnumerable<ITrackableObject> editItems { get; set; }

    [Parameter]
    public ITrackableObject editItem
    {
        get { return editItems?.FirstOrDefault(); }
        set { editItems = value == null ? null : new ITrackableObject[] { value }; }
    }

    [Parameter]
    public string url { get; set; }

    [Parameter]
    public Action afterUpdate { get; set; }


    protected override void OnInitialized()
    {
        if (UpdateContainer != null)
            UpdateContainer.Updates.Add(this);
    }

    public bool HasChanges()
    {
        return editItems != null && editItems.IsTracking() && editItems.HasChanges();
    }

    public bool IsPrintRequired()
    {
        return editItems != null && editItems.IsTracking() && editItems.IsPrintRequired();
    }

    public async Task CancelUpdate()
    {
        editItems.Undo();
        await Task.CompletedTask;
    }

    public async Task ConfirmUpdate()
    {

        try
        {
            IEnumerable<ITrackableObject> additions = editItems.Where(item => item.IsNew()).ToList();
            if (additions.Any())
            {
                await Http.PostAsJsonAsync(url, additions.Cast<TItem>());
                additions.StartTracking();
            }
            else
            {
                Console.WriteLine("Nothing to Add");
            }

            ICollection<ITrackableObject> updates = editItems.Where(item => item.IsModified()).ToList();

            if (updates.Any())
            {
                await Http.PutAsJsonAsync(url, updates.Cast<TItem>());
                updates.StartTracking();
            }
            else
            {
                Console.WriteLine("Nothing to Update");
            }

            IEnumerable<ITrackableObject> deletes = editItems.Where(item => item.IsDeleted()).ToList();
            if (deletes.Any())
            {
                foreach (var itemToDelete in deletes)
                {
                    await Http.DeleteAsync(url + $"/{itemToDelete.Id}");
                }

                deletes.StartTracking();
            }
            else
            {
                Console.WriteLine("Nothing to Delete");
            }

            if (afterUpdate != null)
            {
                afterUpdate();
            }


        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
            Console.WriteLine("Error: " + ex.Message);
        }
    }

    public async Task ConfirmPrint()
    {
        var itemsToPrint = editItems.Where(item => item.IsPrintRequired());
        print.Print(itemsToPrint);

        foreach (var item in editItems)
            item.ClearPrint();

        await Task.CompletedTask;
    }
}
